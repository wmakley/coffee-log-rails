<%= form_with(model: object, url: url, html: {
  class: "log-entry-form",
  data: {
    controller: "log-entry-form",
    action: "change->log-entry-form#enableOrDisableSubmit",
    turbo: local_assigns[:turbo]
  }
}) do |f| %>
  <%- errors = object.errors -%>

  <%= render "services/base_errors", object: object %>

  <% if local_assigns[:show_entry_date] %>
    <div class="mb-3">
      <%= f.label :entry_date, "Date and Time" %>
      <%= f.datetime_select :entry_date, {}, class: "#{'is-invalid' if errors[:entry_date].present?}" %>
      <%= invalid_message(object, :entry_date) %>
    </div>
  <% end %>
  <%
    # Note: We would like to support the following states:
    #
    # 1. Nothing typed in search box:
    #   a.) Coffee selected -> show card
    #   b.) No coffee selected -> no card, require user to type in search box
    # 2. Something in search box:
    #   a.) No coffee selected -> Show all search results below box.
    #   b.) Coffee already selected -> Show selected coffee card below search results.
    #
    # Interactions:
    #
    # - Select coffee:
    #   1. Make the selected coffee the current coffee
    #   2. hide search results
    #
    # - Deselect coffee:
    #   May be caused by:
    #     1. Clicking "clear" button on card
    #
    # - Focus search box:
    #   1. If there are any hidden search results, show them
    #
    # - Type in search box:
    #   2. Show results above currently selected coffee
    #
    # Put more simply, I want a standard auto-complete combo box that shows
    # search results when focused, and shows the currently selected item in a
    # card below it. The search box could be incorporated into the card for
    # presentation.
    #
    # There should also be an option to easily enter a new coffee and use it,
    # or add a photo to a coffee (perhaps in a modal popup).
  %>

  <div data-controller="lookup-coffee-form"
       data-lookup-coffee-form-endpoint-value="<%= lookup_coffee_root_path %>">
    <%= fields_for("lookup_coffee_form", LookupCoffeeForm.new(nil, params.permit(:query, :coffee_id).to_h)) do |search_fields| %>
      <div class="mb-3">
        <%= f.hidden_field :coffee_id,
                           data: {
                             log_entry_form_target: 'coffeeIdInput',
                             lookup_coffee_form_target: 'coffeeIdInput',
                           }
        %>
        <h5>
          <%= search_fields.label :query,
                                  "Start by typing the name of your coffee:",
                                  class: "form-label text-success" %>
        </h5>
        <div class="input-group input-group-lg">
          <span class="input-group-text"><i class="bi bi-search"></i></span>
          <%= search_fields.text_field :query,
                                       class: "form-control form-control-lg",
                                       placeholder: "Click here and start typing...",
                                       data: {
                                         action: "input->lookup-coffee-form#onInput",
                                         log_entry_form_target: "coffeeTextBox",
                                         lookup_coffee_form_target: "queryInput"
                                       } %>
        </div>
      </div>
      <div id="coffee-search-results" data-lookup-coffee-form-target="searchResults">
      </div>
      <div id="selected-coffee-card">
        <%= render "lookup_coffee_form/selected_coffee", coffee: object.coffee if object.coffee %>
      </div>
    <% end %>
  </div>
  <div class="mb-3">
    <%= input f, :brew_method_id, as: :select,
              label: "Brew Method",
              required: true,
              collection: brew_methods,
              include_blank: "",
              input_html: {
                data: {
                  log_entry_form_target: "brewMethodSelect",
                  action: "change->log-entry-form#onBrewMethodChange"
                }
              }
    %>
  </div>
  <div class="row mb-3">
    <div class="col">
      <%= f.label :coffee_grams %>
      <%= f.number_field :coffee_grams,
                         pattern: "\\d*",
                         class: "form-control form-control-lg#{' is-invalid' if errors[:coffee_grams].present?}",
                         placeholder: "Grams of coffee",
                         data: {
                           log_entry_form_target: "coffeeGramsInput",
                           action: "input->log-entry-form#calculateWater change->log-entry-form#onCoffeeChange"
                         }
      %>
      <%= invalid_message(object, :coffee_grams) %>
    </div>
    <div class="col">
      <%= f.label :water_grams %>
      <%= f.number_field :water_grams,
                         pattern: "\\d*",
                         class: "form-control form-control-lg#{' is-invalid' if errors[:water_grams].present?}",
                         placeholder: "Grams of water",
                         data: {
                           log_entry_form_target: "waterGramsInput",
                           action: "change->log-entry-form#onWaterChange"
                         }
      %>
      <%= invalid_message(object, :water_grams) %>
    </div>
  </div>
  <div class="row mb-3">
    <div class="col">
      <%= f.label :grind_notes, "Grind Notes", class: "form-label" %>
      <%= f.text_field :grind_notes, class: "form-control#{' is-invalid' if errors[:grind_notes].present?}" %>
      <%= invalid_message(object, :grind_notes) %>
    </div>
    <div class="col">
      <%= f.label :water, "Water", class: "form-label" %>
      <%= f.text_field :water, class: "form-control#{' is-invalid' if errors[:water].present?}" %>
      <%= invalid_message(object, :water) %>
    </div>
  </div>
  <div class="mb-3">
    <%= input f, :preparation_notes, as: :text_area, label: "Preparation Notes",
              input_html: {
                data: {
                  log_entry_form_target: "preparationNotes",
                }
              }
    %>
  </div>
  <fieldset>
    <legend><i class="bi bi-star-fill"></i> Overall Rating</legend>
    <% 1.upto(5) do |rating| %>
      <div class="form-check form-check-inline">
        <%= f.radio_button :overall_rating, rating, class: "form-check-input" %>
        <%= f.label "overall_rating_#{rating}", rating, class: "form-check-label" %>
      </div>
    <% end %>
  </fieldset>
  <div class="mb-3">
    <%= f.label :tasting_notes, "Tasting Notes", class: "form-label" %>
    <%= f.text_area :tasting_notes, class: "form-control#{' is-invalid' if errors[:tasting_notes].present?}" %>
    <%= invalid_message(object, :tasting_notes) %>
  </div>
  <p>
    <button type="submit" class="btn btn-primary" data-log-entry-form-target="submitButton">
      <%= object.new_record? ? "Create" : "Update" %> Log Entry
    </button>

    <% if object.new_record? %>
      <button type="button" class="btn btn-secondary" data-action="click->log-entry-form#clear">
        Clear
      </button>
    <% end %>

    <% if local_assigns[:cancel_url] %>
      <%= link_to("Cancel", cancel_url, class: "btn btn-secondary") %>
    <% end %>
  </p>
<% end %>
