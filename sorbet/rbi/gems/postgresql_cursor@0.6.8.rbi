# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `postgresql_cursor` gem.
# Please instead update this file by running `bin/tapioca gem postgresql_cursor`.

# PostgreSQLCursor: library class provides postgresql cursor for large result
# set processing. Requires ActiveRecord, but can be adapted to other DBI/ORM libraries.
# If you don't use AR, this assumes #connection and #instantiate methods are available.
#
# options     - Hash to control operation and loop breaks
#   connection: instance  - ActiveRecord connection to use
#   fraction: 0.1..1.0    - The cursor_tuple_fraction (default 1.0)
#   block_size: 1..n      - The number of rows to fetch per db block fetch
#   while: value          - Exits loop when block does not return this value.
#   until: value          - Exits loop when block returns this value.
#   with_hold: boolean    - Allows the query to remain open across commit points.
#   cursor_name: string   - Allows you to name your cursor.
#
# Exmaples:
#   PostgreSQLCursor::Cursor.new("select ...").each { |hash| ... }
#   ActiveRecordModel.where(...).each_row { |hash| ... }
#   ActiveRecordModel.each_row_by_sql("select ...") { |hash| ... }
#   ActiveRecordModel.each_instance_by_sql("select ...") { |model| ... }
#
# source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#24
module PostgreSQLCursor; end

# source://postgresql_cursor//lib/postgresql_cursor/active_record/relation/cursor_iterators.rb#5
module PostgreSQLCursor::ActiveRecord; end

# source://postgresql_cursor//lib/postgresql_cursor/active_record/connection_adapters/postgresql_type_map.rb#4
module PostgreSQLCursor::ActiveRecord::ConnectionAdapters; end

# source://postgresql_cursor//lib/postgresql_cursor/active_record/connection_adapters/postgresql_type_map.rb#5
module PostgreSQLCursor::ActiveRecord::ConnectionAdapters::PostgreSQLTypeMap
  # Returns the private "type_map" needed for the cursor operation
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/connection_adapters/postgresql_type_map.rb#7
  def get_type_map; end
end

# source://postgresql_cursor//lib/postgresql_cursor/active_record/relation/cursor_iterators.rb#6
module PostgreSQLCursor::ActiveRecord::Relation; end

# source://postgresql_cursor//lib/postgresql_cursor/active_record/relation/cursor_iterators.rb#7
module PostgreSQLCursor::ActiveRecord::Relation::CursorIterators
  # Public: Executes the query, returning each row as a hash
  # to the given block.
  #
  # options     - Hash to control
  #   fraction: 0.1..1.0    - The cursor_tuple_fraction (default 1.0)
  #   block_size: 1..n      - The number of rows to fetch per db block fetch
  #   while: value          - Exits loop when block does not return this value.
  #   until: value          - Exits loop when block returns this value.
  #   cursor_name: string   - Allows you to name your cursor.
  #
  # Example:
  #   Post.where(user_id:123).each_row { |hash| Post.process(hash) }
  #   Post.each_row.map {|r| r["id"].to_i }
  #
  # Returns the number of rows yielded to the block
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/relation/cursor_iterators.rb#24
  def each_hash(options = T.unsafe(nil), &block); end

  # Public: Executes the query, yielding each batch of up to block_size
  # rows where each row is a hash to the given block.
  #
  # Parameters: same as each_row
  #
  # Example:
  #   Post.where(user_id:123).each_row_batch do |batch|
  #     Post.process_batch(batch)
  #   end
  #   Post.each_row_batch.map { |batch| Post.transform_batch(batch) }
  #
  # Returns the number of rows yielded to the block
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/relation/cursor_iterators.rb#60
  def each_hash_batch(options = T.unsafe(nil), &block); end

  # Public: Like each_row, but returns an instantiated model object to the block
  #
  # Paramaters: same as each_row
  #
  # Example:
  #   Post.where(user_id:123).each_instance { |post| post.process }
  #   Post.where(user_id:123).each_instance.map { |post| post.process }
  #
  # Returns the number of rows yielded to the block
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/relation/cursor_iterators.rb#41
  def each_instance(options = T.unsafe(nil), &block); end

  # Public: Like each_row, but yields an array of instantiated model
  # objects to the block
  #
  # Parameters: same as each_row
  #
  # Example:
  #   Post.where(user_id:123).each_instance_batch do |batch|
  #     Post.process_batch(batch)
  #   end
  #   Post.where(user_id:123).each_instance_batch.map do |batch|
  #     Post.transform_batch(batch)
  #   end
  #
  # Returns the number of rows yielded to the block
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/relation/cursor_iterators.rb#82
  def each_instance_batch(options = T.unsafe(nil), &block); end

  # Public: Executes the query, returning each row as a hash
  # to the given block.
  #
  # options     - Hash to control
  #   fraction: 0.1..1.0    - The cursor_tuple_fraction (default 1.0)
  #   block_size: 1..n      - The number of rows to fetch per db block fetch
  #   while: value          - Exits loop when block does not return this value.
  #   until: value          - Exits loop when block returns this value.
  #   cursor_name: string   - Allows you to name your cursor.
  #
  # Example:
  #   Post.where(user_id:123).each_row { |hash| Post.process(hash) }
  #   Post.each_row.map {|r| r["id"].to_i }
  #
  # Returns the number of rows yielded to the block
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/relation/cursor_iterators.rb#24
  def each_row(options = T.unsafe(nil), &block); end

  # Public: Executes the query, yielding each batch of up to block_size
  # rows where each row is a hash to the given block.
  #
  # Parameters: same as each_row
  #
  # Example:
  #   Post.where(user_id:123).each_row_batch do |batch|
  #     Post.process_batch(batch)
  #   end
  #   Post.each_row_batch.map { |batch| Post.transform_batch(batch) }
  #
  # Returns the number of rows yielded to the block
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/relation/cursor_iterators.rb#60
  def each_row_batch(options = T.unsafe(nil), &block); end

  # Plucks the column names from the instances, and return them in an array
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/relation/cursor_iterators.rb#98
  def pluck_instance(*cols); end

  # Plucks the column names from the instances, and return them in an array
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/relation/cursor_iterators.rb#98
  def pluck_instances(*cols); end

  # Plucks the column names from the rows, and return them in an array
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/relation/cursor_iterators.rb#90
  def pluck_row(*cols); end

  # Plucks the column names from the rows, and return them in an array
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/relation/cursor_iterators.rb#90
  def pluck_rows(*cols); end

  private

  # Returns sql string like #to_sql, but with bind parameters interpolated.
  # ActiveRecord sets up query as prepared statements with bind variables.
  # Cursors will prepare statements regardless.
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/relation/cursor_iterators.rb#110
  def to_unprepared_sql; end
end

# source://postgresql_cursor//lib/postgresql_cursor/active_record/sql_cursor.rb#3
module PostgreSQLCursor::ActiveRecord::SqlCursor
  # Public: Executes the query, returning each row as a hash
  # to the given block.
  #
  # options     - Hash to control
  #   fraction: 0.1..1.0    - The cursor_tuple_fraction (default 1.0)
  #   block_size: 1..n      - The number of rows to fetch per db block fetch
  #   while: value          - Exits loop when block does not return this value.
  #   until: value          - Exits loop when block returns this value.
  #   with_hold: boolean    - Allows the query to remain open across commit points.
  #
  # Example:
  #   Post.each_row { |hash| Post.process(hash) }
  #
  # Returns the number of rows yielded to the block
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/sql_cursor.rb#18
  def each_hash(options = T.unsafe(nil), &block); end

  # Public: Executes the query, yielding an array of up to block_size rows
  # where each row is a hash to the given block.
  #
  # Parameters: same as each_row
  #
  # Example:
  #   Post.each_row_batch { |batch| Post.process_batch(batch) }
  #
  # Returns the number of rows yielded to the block
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/sql_cursor.rb#86
  def each_hash_batch(options = T.unsafe(nil), &block); end

  # Public: Yields each batch of up to block_size rows as an array of rows
  # where each row as a hash to the given block
  #
  # Parameters: see each_row_by_sql
  #
  # Example:
  #   Post.each_row_batch_by_sql("select * from posts") do |batch|
  #     Post.process_batch(batch)
  #   end
  #   Post.each_row_batch_by_sql("select * from posts").map do |batch|
  #     Post.transform_batch(batch)
  #   end
  #
  # Returns the number of rows yielded to the block
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/sql_cursor.rb#120
  def each_hash_batch_by_sql(sql, options = T.unsafe(nil), &block); end

  # sql         - Full SQL statement, variables interpolated
  # options     - Hash to control
  #   fraction: 0.1..1.0    - The cursor_tuple_fraction (default 1.0)
  #   block_size: 1..n      - The number of rows to fetch per db block fetch
  #   while: value          - Exits loop when block does not return this value.
  #   until: value          - Exits loop when block returns this value.
  #   with_hold: boolean    - Allows the query to remain open across commit points.
  #
  # Example:
  #   Post.each_row_by_sql("select * from posts") { |hash| Post.process(hash) }
  #   Post.each_row_by_sql("select * from posts").count
  #
  # Returns the number of rows yielded to the block
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/sql_cursor.rb#52
  def each_hash_by_sql(sql, options = T.unsafe(nil), &block); end

  # Public: Like each_row, but returns an instantiated model object to the block
  #
  # Paramaters: same as each_row
  #
  # Example:
  #   Post.each_instance { |post| post.process }
  #
  # Returns the number of rows yielded to the block
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/sql_cursor.rb#32
  def each_instance(options = T.unsafe(nil), &block); end

  # Public: Like each_row_batch, but yields an array of instantiated model
  # objects to the block
  #
  # Parameters: same as each_row
  #
  # Example:
  #   Post.each_instance_batch { |batch| Post.process_batch(batch) }
  #
  # Returns the number of rows yielded to the block
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/sql_cursor.rb#101
  def each_instance_batch(options = T.unsafe(nil), &block); end

  # Public: Yields each batch up to block_size of rows as model instances
  # to the given block
  #
  # As this instantiates a model object, it is slower than each_row_batch_by_sql
  #
  # Paramaters: see each_row_by_sql
  #
  # Example:
  #   Post.each_instance_batch_by_sql("select * from posts") do |batch|
  #     Post.process_batch(batch)
  #   end
  #   Post.each_instance_batch_by_sql("select * from posts").map do |batch|
  #     Post.transform_batch(batch)
  #   end
  #
  # Returns the number of rows yielded to the block
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/sql_cursor.rb#144
  def each_instance_batch_by_sql(sql, options = T.unsafe(nil), &block); end

  # Public: Returns each row as a model instance to the given block
  # As this instantiates a model object, it is slower than each_row_by_sql
  #
  # Paramaters: see each_row_by_sql
  #
  # Example:
  #   Post.each_instance_by_sql("select * from posts") { |post| post.process }
  #   Post.each_instance_by_sql("select * from posts").count
  #
  # Returns the number of rows yielded to the block
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/sql_cursor.rb#70
  def each_instance_by_sql(sql, options = T.unsafe(nil), &block); end

  # Public: Executes the query, returning each row as a hash
  # to the given block.
  #
  # options     - Hash to control
  #   fraction: 0.1..1.0    - The cursor_tuple_fraction (default 1.0)
  #   block_size: 1..n      - The number of rows to fetch per db block fetch
  #   while: value          - Exits loop when block does not return this value.
  #   until: value          - Exits loop when block returns this value.
  #   with_hold: boolean    - Allows the query to remain open across commit points.
  #
  # Example:
  #   Post.each_row { |hash| Post.process(hash) }
  #
  # Returns the number of rows yielded to the block
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/sql_cursor.rb#18
  def each_row(options = T.unsafe(nil), &block); end

  # Public: Executes the query, yielding an array of up to block_size rows
  # where each row is a hash to the given block.
  #
  # Parameters: same as each_row
  #
  # Example:
  #   Post.each_row_batch { |batch| Post.process_batch(batch) }
  #
  # Returns the number of rows yielded to the block
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/sql_cursor.rb#86
  def each_row_batch(options = T.unsafe(nil), &block); end

  # Public: Yields each batch of up to block_size rows as an array of rows
  # where each row as a hash to the given block
  #
  # Parameters: see each_row_by_sql
  #
  # Example:
  #   Post.each_row_batch_by_sql("select * from posts") do |batch|
  #     Post.process_batch(batch)
  #   end
  #   Post.each_row_batch_by_sql("select * from posts").map do |batch|
  #     Post.transform_batch(batch)
  #   end
  #
  # Returns the number of rows yielded to the block
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/sql_cursor.rb#120
  def each_row_batch_by_sql(sql, options = T.unsafe(nil), &block); end

  # sql         - Full SQL statement, variables interpolated
  # options     - Hash to control
  #   fraction: 0.1..1.0    - The cursor_tuple_fraction (default 1.0)
  #   block_size: 1..n      - The number of rows to fetch per db block fetch
  #   while: value          - Exits loop when block does not return this value.
  #   until: value          - Exits loop when block returns this value.
  #   with_hold: boolean    - Allows the query to remain open across commit points.
  #
  # Example:
  #   Post.each_row_by_sql("select * from posts") { |hash| Post.process(hash) }
  #   Post.each_row_by_sql("select * from posts").count
  #
  # Returns the number of rows yielded to the block
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/sql_cursor.rb#52
  def each_row_by_sql(sql, options = T.unsafe(nil), &block); end

  # Returns an array of the given column names. Use if you need cursors and don't expect
  # this to comsume too much memory. Values are instance types. Like ActiveRecord's pluck.
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/sql_cursor.rb#161
  def pluck_instance(*cols); end

  # Returns an array of the given column names. Use if you need cursors and don't expect
  # this to comsume too much memory. Values are instance types. Like ActiveRecord's pluck.
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/sql_cursor.rb#161
  def pluck_instances(*cols); end

  # Returns an array of the given column names. Use if you need cursors and don't expect
  # this to comsume too much memory. Values are strings. Like ActiveRecord's pluck.
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/sql_cursor.rb#153
  def pluck_row(*cols); end

  # Returns an array of the given column names. Use if you need cursors and don't expect
  # this to comsume too much memory. Values are strings. Like ActiveRecord's pluck.
  #
  # source://postgresql_cursor//lib/postgresql_cursor/active_record/sql_cursor.rb#153
  def pluck_rows(*cols); end
end

# source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#25
class PostgreSQLCursor::Cursor
  include ::Enumerable

  # Public: Start a new PostgreSQL cursor query
  # sql     - The SQL statement with interpolated values
  # options - hash of processing controls
  #   while: value    - Exits loop when block does not return this value.
  #   until: value    - Exits loop when block returns this value.
  #   fraction: 0.1..1.0    - The cursor_tuple_fraction (default 1.0)
  #   block_size: 1..n      - The number of rows to fetch per db block fetch
  #                           Defaults to 1000
  #   with_hold       - Allows the query to remain open across commit points.
  #
  # Examples
  #
  #   PostgreSQLCursor::Cursor.new("select ....")
  #
  # Returns the cursor object when called with new.
  #
  # @return [Cursor] a new instance of Cursor
  #
  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#44
  def initialize(sql, options = T.unsafe(nil)); end

  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#221
  def cast_types(row); end

  # Public: Closes the cursor
  #
  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#278
  def close; end

  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#225
  def column_types; end

  # Returns the value of attribute connection.
  #
  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#27
  def connection; end

  # Returns the value of attribute count.
  #
  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#27
  def count; end

  # Public: Yields each row of the result set to the passed block
  #
  # Yields the row to the block. The row is a hash with symbolized keys.
  #   {colname: value, ....}
  #
  # Returns the count of rows processed
  #
  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#80
  def each(&block); end

  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#97
  def each_array(&block); end

  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#130
  def each_array_batch(&block); end

  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#201
  def each_batch(&block); end

  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#110
  def each_instance(klass = T.unsafe(nil), &block); end

  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#143
  def each_instance_batch(klass = T.unsafe(nil), &block); end

  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#90
  def each_row(&block); end

  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#123
  def each_row_batch(&block); end

  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#179
  def each_tuple(&block); end

  # Public: Returns the next row from the cursor, or empty hash if end of results
  #
  # Returns a row as a hash of {'colname'=>value,...}
  #
  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#257
  def fetch(options = T.unsafe(nil)); end

  # Private: Fetches the next block of rows into @block
  #
  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#266
  def fetch_block(block_size = T.unsafe(nil)); end

  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#69
  def iterate_batched(batched = T.unsafe(nil)); end

  # Specify the type to instantiate, or reset to return a Hash.
  #
  # Explicitly check for type class to prevent calling equality
  # operator on active record relation, which will load it.
  #
  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#57
  def iterate_type(type = T.unsafe(nil)); end

  # Public: Opens (actually, "declares") the cursor. Call this before fetching
  #
  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#246
  def open; end

  # Returns the value of attribute options.
  #
  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#27
  def options; end

  # Returns an array of columns plucked from the result rows.
  # Experimental function, as this could still use too much memory
  # and negate the purpose of this libarary.
  # Should this return a lazy enumerator instead?
  #
  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#162
  def pluck(*cols); end

  # Returns the value of attribute result.
  #
  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#27
  def result; end

  # Private: Sets the PostgreSQL cursor_tuple_fraction value = 1.0 to assume all rows will be fetched
  # This is a value between 0.1 and 1.0 (PostgreSQL defaults to 0.1, this library defaults to 1.0)
  # used to determine the expected fraction (percent) of result rows returned the the caller.
  # This value determines the access path by the query planner.
  #
  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#295
  def set_cursor_tuple_fraction(frac = T.unsafe(nil)); end

  # Returns the value of attribute sql.
  #
  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#27
  def sql; end

  # Private: Open transaction unless with_hold option, specified
  #
  # source://postgresql_cursor//lib/postgresql_cursor/cursor.rb#283
  def with_optional_transaction; end
end

# source://postgresql_cursor//lib/postgresql_cursor/version.rb#3
module PostgresqlCursor; end

# source://postgresql_cursor//lib/postgresql_cursor/version.rb#4
PostgresqlCursor::VERSION = T.let(T.unsafe(nil), String)
