# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `GeneratedUrlHelpersModule`.
# Please instead update this file by running `bin/tapioca dsl GeneratedUrlHelpersModule`.

module GeneratedUrlHelpersModule
  include ::ActionDispatch::Routing::UrlFor
  include ::ActionDispatch::Routing::PolymorphicRoutes

  sig { params(args: T.untyped).returns(String) }
  def auth_email_verification_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def auth_password_reset_request_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def auth_password_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def auth_session_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def auth_signup_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def banned_ip_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def banned_ips_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def brew_method_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def brew_methods_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def coffee_brand_logo_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def coffee_brand_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def coffee_brands_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def coffee_photo_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def coffee_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def coffees_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def edit_auth_password_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def edit_brew_method_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def edit_coffee_brand_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def edit_coffee_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def edit_log_entry_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def edit_signup_code_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def edit_user_group_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def edit_user_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def exceptions_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def log_entries_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def log_entry_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def log_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def logs_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def lookup_coffee_root_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def lookup_coffee_search_results_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def lookup_coffee_select_coffee_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def my_account_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def new_auth_email_verification_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def new_auth_password_reset_request_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def new_auth_session_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def new_auth_signup_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def new_brew_method_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def new_coffee_brand_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def new_coffee_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def new_log_entry_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def new_rails_conductor_inbound_email_source_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def new_rails_conductor_inbound_email_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def new_signup_code_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def new_user_group_membership_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def new_user_group_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def new_user_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_blob_representation_proxy_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_blob_representation_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_blob_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_conductor_inbound_email_incinerate_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_conductor_inbound_email_reroute_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_conductor_inbound_email_sources_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_conductor_inbound_email_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_conductor_inbound_emails_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_direct_uploads_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_disk_service_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_health_check_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_info_properties_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_info_routes_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_info_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_mailers_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_mailgun_inbound_emails_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_mandrill_inbound_emails_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_mandrill_inbound_health_check_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_postmark_inbound_emails_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_relay_inbound_emails_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_representation_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_sendgrid_inbound_emails_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_service_blob_proxy_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_service_blob_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_storage_proxy_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def rails_storage_redirect_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def root_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def signup_code_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def signup_codes_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def sort_coffees_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def success_auth_signup_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def turbo_recede_historical_location_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def turbo_refresh_historical_location_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def turbo_resume_historical_location_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def update_rails_disk_service_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def user_group_membership_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def user_group_memberships_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def user_group_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def user_groups_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def user_url(*args); end

  sig { params(args: T.untyped).returns(String) }
  def users_url(*args); end
end
