# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `LogEntry`.
# Please instead update this file by running `bin/tapioca dsl LogEntry`.

class LogEntry
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::LogEntry).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::LogEntry).void)).returns(::LogEntry) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::LogEntry).void)).returns(::LogEntry) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::LogEntry).void)).returns(::LogEntry) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::LogEntry).void)).returns(::LogEntry) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::LogEntry).void)).returns(::LogEntry) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::LogEntry]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::LogEntry)) }
    def fifth; end

    sig { returns(::LogEntry) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::LogEntry)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::LogEntry) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::LogEntry).void)
      ).returns(T.nilable(T::Enumerator[::LogEntry]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::LogEntry]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::LogEntry]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::LogEntry).void)).returns(::LogEntry) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::LogEntry).void)).returns(::LogEntry) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::LogEntry).void)).returns(::LogEntry) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::LogEntry)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::LogEntry) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::LogEntry) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::LogEntry) }
    def first!; end

    sig { returns(T.nilable(::LogEntry)) }
    def forty_two; end

    sig { returns(::LogEntry) }
    def forty_two!; end

    sig { returns(T.nilable(::LogEntry)) }
    def fourth; end

    sig { returns(::LogEntry) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::LogEntry) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::LogEntry).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::LogEntry).void)).returns(::LogEntry) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::LogEntry).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::LogEntry).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::LogEntry)) }
    def second; end

    sig { returns(::LogEntry) }
    def second!; end

    sig { returns(T.nilable(::LogEntry)) }
    def second_to_last; end

    sig { returns(::LogEntry) }
    def second_to_last!; end

    sig { returns(::LogEntry) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::LogEntry) }
    def take!; end

    sig { returns(T.nilable(::LogEntry)) }
    def third; end

    sig { returns(::LogEntry) }
    def third!; end

    sig { returns(T.nilable(::LogEntry)) }
    def third_to_last; end

    sig { returns(::LogEntry) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::BrewMethod)) }
    def brew_method; end

    sig { params(value: T.nilable(::BrewMethod)).void }
    def brew_method=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BrewMethod) }
    def build_brew_method(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Coffee) }
    def build_coffee(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Log) }
    def build_log(*args, &blk); end

    sig { returns(T.nilable(::Coffee)) }
    def coffee; end

    sig { params(value: T.nilable(::Coffee)).void }
    def coffee=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BrewMethod) }
    def create_brew_method(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::BrewMethod) }
    def create_brew_method!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Coffee) }
    def create_coffee(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Coffee) }
    def create_coffee!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Log) }
    def create_log(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Log) }
    def create_log!(*args, &blk); end

    sig { returns(T.nilable(::Log)) }
    def log; end

    sig { params(value: T.nilable(::Log)).void }
    def log=(value); end

    sig { returns(T.nilable(::BrewMethod)) }
    def reload_brew_method; end

    sig { returns(T.nilable(::Coffee)) }
    def reload_coffee; end

    sig { returns(T.nilable(::Log)) }
    def reload_log; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def by_date_desc(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def live(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Integer)) }
    def acidity; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def acidity=(value); end

    sig { returns(T::Boolean) }
    def acidity?; end

    sig { returns(T.nilable(::Integer)) }
    def acidity_before_last_save; end

    sig { returns(T.untyped) }
    def acidity_before_type_cast; end

    sig { returns(T::Boolean) }
    def acidity_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def acidity_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def acidity_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def acidity_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def acidity_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def acidity_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def acidity_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def acidity_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def acidity_was; end

    sig { void }
    def acidity_will_change!; end

    sig { returns(T.nilable(::String)) }
    def addl_notes; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def addl_notes=(value); end

    sig { returns(T::Boolean) }
    def addl_notes?; end

    sig { returns(T.nilable(::String)) }
    def addl_notes_before_last_save; end

    sig { returns(T.untyped) }
    def addl_notes_before_type_cast; end

    sig { returns(T::Boolean) }
    def addl_notes_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def addl_notes_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def addl_notes_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def addl_notes_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def addl_notes_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def addl_notes_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def addl_notes_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def addl_notes_previously_was; end

    sig { returns(T.nilable(::String)) }
    def addl_notes_was; end

    sig { void }
    def addl_notes_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def bitterness; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def bitterness=(value); end

    sig { returns(T::Boolean) }
    def bitterness?; end

    sig { returns(T.nilable(::Integer)) }
    def bitterness_before_last_save; end

    sig { returns(T.untyped) }
    def bitterness_before_type_cast; end

    sig { returns(T::Boolean) }
    def bitterness_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def bitterness_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def bitterness_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def bitterness_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def bitterness_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def bitterness_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def bitterness_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def bitterness_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def bitterness_was; end

    sig { void }
    def bitterness_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def body; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def body=(value); end

    sig { returns(T::Boolean) }
    def body?; end

    sig { returns(T.nilable(::Integer)) }
    def body_before_last_save; end

    sig { returns(T.untyped) }
    def body_before_type_cast; end

    sig { returns(T::Boolean) }
    def body_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def body_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def body_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def body_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def body_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def body_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def body_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def body_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def body_was; end

    sig { void }
    def body_will_change!; end

    sig { returns(::Integer) }
    def brew_method_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def brew_method_id=(value); end

    sig { returns(T::Boolean) }
    def brew_method_id?; end

    sig { returns(T.nilable(::Integer)) }
    def brew_method_id_before_last_save; end

    sig { returns(T.untyped) }
    def brew_method_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def brew_method_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def brew_method_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def brew_method_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def brew_method_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def brew_method_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def brew_method_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def brew_method_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def brew_method_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def brew_method_id_was; end

    sig { void }
    def brew_method_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def coffee_grams; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def coffee_grams=(value); end

    sig { returns(T::Boolean) }
    def coffee_grams?; end

    sig { returns(T.nilable(::Integer)) }
    def coffee_grams_before_last_save; end

    sig { returns(T.untyped) }
    def coffee_grams_before_type_cast; end

    sig { returns(T::Boolean) }
    def coffee_grams_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def coffee_grams_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def coffee_grams_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def coffee_grams_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def coffee_grams_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def coffee_grams_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def coffee_grams_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def coffee_grams_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def coffee_grams_was; end

    sig { void }
    def coffee_grams_will_change!; end

    sig { returns(::Integer) }
    def coffee_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def coffee_id=(value); end

    sig { returns(T::Boolean) }
    def coffee_id?; end

    sig { returns(T.nilable(::Integer)) }
    def coffee_id_before_last_save; end

    sig { returns(T.untyped) }
    def coffee_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def coffee_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def coffee_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def coffee_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def coffee_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def coffee_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def coffee_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def coffee_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def coffee_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def coffee_id_was; end

    sig { void }
    def coffee_id_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at=(value); end

    sig { returns(T::Boolean) }
    def deleted_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_before_last_save; end

    sig { returns(T.untyped) }
    def deleted_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def deleted_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def deleted_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def deleted_at_previous_change; end

    sig do
      params(
        from: T.nilable(::ActiveSupport::TimeWithZone),
        to: T.nilable(::ActiveSupport::TimeWithZone)
      ).returns(T::Boolean)
    end
    def deleted_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def deleted_at_was; end

    sig { void }
    def deleted_at_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def entry_date; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def entry_date=(value); end

    sig { returns(T::Boolean) }
    def entry_date?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def entry_date_before_last_save; end

    sig { returns(T.untyped) }
    def entry_date_before_type_cast; end

    sig { returns(T::Boolean) }
    def entry_date_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def entry_date_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def entry_date_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def entry_date_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def entry_date_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def entry_date_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def entry_date_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def entry_date_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def entry_date_was; end

    sig { void }
    def entry_date_will_change!; end

    sig { returns(T.nilable(::String)) }
    def grind_notes; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def grind_notes=(value); end

    sig { returns(T::Boolean) }
    def grind_notes?; end

    sig { returns(T.nilable(::String)) }
    def grind_notes_before_last_save; end

    sig { returns(T.untyped) }
    def grind_notes_before_type_cast; end

    sig { returns(T::Boolean) }
    def grind_notes_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def grind_notes_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def grind_notes_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def grind_notes_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def grind_notes_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def grind_notes_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def grind_notes_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def grind_notes_previously_was; end

    sig { returns(T.nilable(::String)) }
    def grind_notes_was; end

    sig { void }
    def grind_notes_will_change!; end

    sig { returns(T.nilable(::Float)) }
    def grind_setting; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def grind_setting=(value); end

    sig { returns(T::Boolean) }
    def grind_setting?; end

    sig { returns(T.nilable(::Float)) }
    def grind_setting_before_last_save; end

    sig { returns(T.untyped) }
    def grind_setting_before_type_cast; end

    sig { returns(T::Boolean) }
    def grind_setting_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def grind_setting_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def grind_setting_change_to_be_saved; end

    sig { params(from: T.nilable(::Float), to: T.nilable(::Float)).returns(T::Boolean) }
    def grind_setting_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def grind_setting_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def grind_setting_previous_change; end

    sig { params(from: T.nilable(::Float), to: T.nilable(::Float)).returns(T::Boolean) }
    def grind_setting_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def grind_setting_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def grind_setting_was; end

    sig { void }
    def grind_setting_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::Integer) }
    def log_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def log_id=(value); end

    sig { returns(T::Boolean) }
    def log_id?; end

    sig { returns(T.nilable(::Integer)) }
    def log_id_before_last_save; end

    sig { returns(T.untyped) }
    def log_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def log_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def log_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def log_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def log_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def log_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def log_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def log_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def log_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def log_id_was; end

    sig { void }
    def log_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def overall_rating; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def overall_rating=(value); end

    sig { returns(T::Boolean) }
    def overall_rating?; end

    sig { returns(T.nilable(::Integer)) }
    def overall_rating_before_last_save; end

    sig { returns(T.untyped) }
    def overall_rating_before_type_cast; end

    sig { returns(T::Boolean) }
    def overall_rating_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def overall_rating_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def overall_rating_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def overall_rating_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def overall_rating_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def overall_rating_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def overall_rating_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def overall_rating_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def overall_rating_was; end

    sig { void }
    def overall_rating_will_change!; end

    sig { returns(T.nilable(::String)) }
    def preparation_notes; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def preparation_notes=(value); end

    sig { returns(T::Boolean) }
    def preparation_notes?; end

    sig { returns(T.nilable(::String)) }
    def preparation_notes_before_last_save; end

    sig { returns(T.untyped) }
    def preparation_notes_before_type_cast; end

    sig { returns(T::Boolean) }
    def preparation_notes_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def preparation_notes_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def preparation_notes_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def preparation_notes_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def preparation_notes_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def preparation_notes_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def preparation_notes_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def preparation_notes_previously_was; end

    sig { returns(T.nilable(::String)) }
    def preparation_notes_was; end

    sig { void }
    def preparation_notes_will_change!; end

    sig { void }
    def restore_acidity!; end

    sig { void }
    def restore_addl_notes!; end

    sig { void }
    def restore_bitterness!; end

    sig { void }
    def restore_body!; end

    sig { void }
    def restore_brew_method_id!; end

    sig { void }
    def restore_coffee_grams!; end

    sig { void }
    def restore_coffee_id!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_deleted_at!; end

    sig { void }
    def restore_entry_date!; end

    sig { void }
    def restore_grind_notes!; end

    sig { void }
    def restore_grind_setting!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_log_id!; end

    sig { void }
    def restore_overall_rating!; end

    sig { void }
    def restore_preparation_notes!; end

    sig { void }
    def restore_strength!; end

    sig { void }
    def restore_tasting_notes!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_water!; end

    sig { void }
    def restore_water_grams!; end

    sig { void }
    def restore_water_temp_in_celsius!; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_acidity; end

    sig { returns(T::Boolean) }
    def saved_change_to_acidity?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_addl_notes; end

    sig { returns(T::Boolean) }
    def saved_change_to_addl_notes?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_bitterness; end

    sig { returns(T::Boolean) }
    def saved_change_to_bitterness?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_body; end

    sig { returns(T::Boolean) }
    def saved_change_to_body?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_brew_method_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_brew_method_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_coffee_grams; end

    sig { returns(T::Boolean) }
    def saved_change_to_coffee_grams?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_coffee_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_coffee_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_deleted_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_deleted_at?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_entry_date; end

    sig { returns(T::Boolean) }
    def saved_change_to_entry_date?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_grind_notes; end

    sig { returns(T::Boolean) }
    def saved_change_to_grind_notes?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_grind_setting; end

    sig { returns(T::Boolean) }
    def saved_change_to_grind_setting?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_log_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_log_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_overall_rating; end

    sig { returns(T::Boolean) }
    def saved_change_to_overall_rating?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_preparation_notes; end

    sig { returns(T::Boolean) }
    def saved_change_to_preparation_notes?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_strength; end

    sig { returns(T::Boolean) }
    def saved_change_to_strength?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_tasting_notes; end

    sig { returns(T::Boolean) }
    def saved_change_to_tasting_notes?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_water; end

    sig { returns(T::Boolean) }
    def saved_change_to_water?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_water_grams; end

    sig { returns(T::Boolean) }
    def saved_change_to_water_grams?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_water_temp_in_celsius; end

    sig { returns(T::Boolean) }
    def saved_change_to_water_temp_in_celsius?; end

    sig { returns(T.nilable(::Integer)) }
    def strength; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def strength=(value); end

    sig { returns(T::Boolean) }
    def strength?; end

    sig { returns(T.nilable(::Integer)) }
    def strength_before_last_save; end

    sig { returns(T.untyped) }
    def strength_before_type_cast; end

    sig { returns(T::Boolean) }
    def strength_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def strength_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def strength_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def strength_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def strength_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def strength_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def strength_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def strength_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def strength_was; end

    sig { void }
    def strength_will_change!; end

    sig { returns(T.nilable(::String)) }
    def tasting_notes; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def tasting_notes=(value); end

    sig { returns(T::Boolean) }
    def tasting_notes?; end

    sig { returns(T.nilable(::String)) }
    def tasting_notes_before_last_save; end

    sig { returns(T.untyped) }
    def tasting_notes_before_type_cast; end

    sig { returns(T::Boolean) }
    def tasting_notes_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tasting_notes_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tasting_notes_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def tasting_notes_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def tasting_notes_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def tasting_notes_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def tasting_notes_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def tasting_notes_previously_was; end

    sig { returns(T.nilable(::String)) }
    def tasting_notes_was; end

    sig { void }
    def tasting_notes_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def water; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def water=(value); end

    sig { returns(T::Boolean) }
    def water?; end

    sig { returns(T.nilable(::String)) }
    def water_before_last_save; end

    sig { returns(T.untyped) }
    def water_before_type_cast; end

    sig { returns(T::Boolean) }
    def water_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def water_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def water_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def water_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def water_grams; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def water_grams=(value); end

    sig { returns(T::Boolean) }
    def water_grams?; end

    sig { returns(T.nilable(::Integer)) }
    def water_grams_before_last_save; end

    sig { returns(T.untyped) }
    def water_grams_before_type_cast; end

    sig { returns(T::Boolean) }
    def water_grams_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def water_grams_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def water_grams_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def water_grams_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def water_grams_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def water_grams_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def water_grams_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def water_grams_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def water_grams_was; end

    sig { void }
    def water_grams_will_change!; end

    sig { returns(T.nilable(::String)) }
    def water_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def water_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def water_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def water_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def water_temp_in_celsius; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def water_temp_in_celsius=(value); end

    sig { returns(T::Boolean) }
    def water_temp_in_celsius?; end

    sig { returns(T.nilable(::Float)) }
    def water_temp_in_celsius_before_last_save; end

    sig { returns(T.untyped) }
    def water_temp_in_celsius_before_type_cast; end

    sig { returns(T::Boolean) }
    def water_temp_in_celsius_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def water_temp_in_celsius_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def water_temp_in_celsius_change_to_be_saved; end

    sig { params(from: T.nilable(::Float), to: T.nilable(::Float)).returns(T::Boolean) }
    def water_temp_in_celsius_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def water_temp_in_celsius_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def water_temp_in_celsius_previous_change; end

    sig { params(from: T.nilable(::Float), to: T.nilable(::Float)).returns(T::Boolean) }
    def water_temp_in_celsius_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Float)) }
    def water_temp_in_celsius_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def water_temp_in_celsius_was; end

    sig { void }
    def water_temp_in_celsius_will_change!; end

    sig { returns(T.nilable(::String)) }
    def water_was; end

    sig { void }
    def water_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_acidity?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_addl_notes?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_bitterness?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_body?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_brew_method_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_coffee_grams?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_coffee_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_deleted_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_entry_date?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_grind_notes?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_grind_setting?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_log_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_overall_rating?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_preparation_notes?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_strength?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_tasting_notes?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_water?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_water_grams?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_water_temp_in_celsius?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def by_date_desc(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def live(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::LogEntry } }

    sig { returns(T::Array[::LogEntry]) }
    def to_a; end

    sig { returns(T::Array[::LogEntry]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::LogEntry } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::LogEntry } }

    sig do
      params(
        records: T.any(::LogEntry, T::Enumerable[T.any(::LogEntry, T::Enumerable[::LogEntry])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::LogEntry, T::Enumerable[T.any(::LogEntry, T::Enumerable[::LogEntry])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::LogEntry, T::Enumerable[T.any(::LogEntry, T::Enumerable[::LogEntry])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::LogEntry, Integer, String, T::Enumerable[T.any(::LogEntry, Integer, String, T::Enumerable[::LogEntry])])
      ).returns(T::Array[::LogEntry])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::LogEntry, Integer, String, T::Enumerable[T.any(::LogEntry, Integer, String, T::Enumerable[::LogEntry])])
      ).returns(T::Array[::LogEntry])
    end
    def destroy(*records); end

    sig { returns(T::Array[::LogEntry]) }
    def load_target; end

    sig do
      params(
        records: T.any(::LogEntry, T::Enumerable[T.any(::LogEntry, T::Enumerable[::LogEntry])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::LogEntry, T::Enumerable[T.any(::LogEntry, T::Enumerable[::LogEntry])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::LogEntry, T::Enumerable[T.any(::LogEntry, T::Enumerable[::LogEntry])])
      ).returns(T::Array[::LogEntry])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::LogEntry]) }
    def target; end

    sig { returns(T::Array[::LogEntry]) }
    def to_a; end

    sig { returns(T::Array[::LogEntry]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::LogEntry } }

    sig { returns(T::Array[::LogEntry]) }
    def to_a; end

    sig { returns(T::Array[::LogEntry]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::LogEntry } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
