# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `ActiveSupport::TestCase`.
# Please instead update this file by running `bin/tapioca dsl ActiveSupport::TestCase`.

class ActiveSupport::TestCase
  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def banned_ips(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def brew_methods(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def coffee_brands(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def coffees(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def group_memberships(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def log_entries(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def login_attempts(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def logs(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def roasts(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def signup_codes(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def user_groups(*fixture_names); end

  sig { params(fixture_names: T.any(String, Symbol)).returns(T.untyped) }
  def users(*fixture_names); end
end
